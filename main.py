import telebot
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from time import sleep

API_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(API_TOKEN)

user_states = {}

# –í–æ–ø—Ä–æ—Å—ã ‚Äî –¥–æ–±–∞–≤–ª—è–π —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å
questions = [
    {
        "text": "üìç –í–æ–ø—Ä–æ—Å 1:\n–ì–¥–µ –±—ã–ª–∞ –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞?",
        "options": ["–í –ø–∞—Ä–∫–µ", "–£ –º–µ–Ω—è –¥–æ–º–∞", "–£ —Ç–≤–æ–µ–≥–æ –ø–æ–¥—ä–µ–∑–¥–∞"],
        "correct": "–£ —Ç–≤–æ–µ–≥–æ –ø–æ–¥—ä–µ–∑–¥–∞",
        "after": None
    },
    {
        "text": "üìç –í–æ–ø—Ä–æ—Å 2:\n–ß—Ç–æ —è —Ç–µ–±–µ –ø–æ–¥–∞—Ä–∏–ª –≤ —Ç–æ—Ç –¥–µ–Ω—å?",
        "options": ["–ë—Ä–∞—Å–ª–µ—Ç", "–ü–∏—Å—å–º–æ", "–û–±—ä—è—Ç–∏–µ"],
        "correct": "–û–±—ä—è—Ç–∏–µ",
        "after": {
            "type": "text",
            "content": "üíå –≠—Ç–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è—Ç–∏–µ, –Ω–æ —Å –æ–≥—Ä–æ–º–Ω–æ–π —Ç–µ–ø–ª–æ—Ç–æ–π. –Ø –ø–æ–º–Ω—é —ç—Ç–æ –¥–æ —Å–∏—Ö –ø–æ—Ä."
        }
    },
    {
        "text": "üìç –í–æ–ø—Ä–æ—Å 3:\n–ß—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é, –∫–æ–≥–¥–∞ —Ç—ã —Ä—è–¥–æ–º?",
        "options": ["–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–í–æ–ª–Ω–µ–Ω–∏–µ", "–í—Å—ë —Å—Ä–∞–∑—É"],
        "correct": "–í—Å—ë —Å—Ä–∞–∑—É",
        "after": {
            "type": "media",
            "media_type": "photo",
            "content": "https://telegra.ph/file/your_image_link.jpg"
        }
    }
]

# –°—é—Ä–ø—Ä–∏–∑—ã –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ ‚Äî –±—É–¥—É—Ç –≤—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ N –≤–æ–ø—Ä–æ—Å–æ–≤
surprise_blocks = {
    3: {
        "type": "text",
        "content": "üéÅ –ú–∞–ª–µ–Ω—å–∫–∏–π –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞: —Ç—ã ‚Äî –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å üíú"
    },
    6: {
        "type": "media",
        "media_type": "photo",
        "content": "https://telegra.ph/file/another_surprise.jpg"
    }
}

# ========== –°—Ç–∞—Ä—Ç ==========

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_states[message.chat.id] = {"step": 0, "score": 0, "history": []}
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, –º–æ—è —Ö–æ—Ä–æ—à–∞—è üíú\n–ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞—à —Ç—ë–ø–ª—ã–π —Ç–µ—Å—Ç?\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
        reply_markup=start_keyboard()
    )

def start_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöÄ –ü–æ–µ—Ö–∞–ª–∏!", callback_data="start_test"))
    return markup

# ========== –í–æ–ø—Ä–æ—Å—ã ==========

def send_question(chat_id, step):
    q = questions[step]
    markup = InlineKeyboardMarkup()
    for opt in q["options"]:
        markup.add(InlineKeyboardButton(opt, callback_data=f"answer:{opt}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if step > 0:
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back"))
    bot.send_message(chat_id, q["text"], reply_markup=markup)

def send_surprise(chat_id, step):
    surprise = surprise_blocks.get(step)
    if not surprise:
        return
    if surprise["type"] == "text":
        bot.send_message(chat_id, surprise["content"])
    elif surprise["type"] == "media":
        if surprise["media_type"] == "photo":
            bot.send_photo(chat_id, surprise["content"])
        elif surprise["media_type"] == "video":
            bot.send_video(chat_id, surprise["content"])

# ========== –û—Ç–≤–µ—Ç—ã ==========

@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def handle_start_test(call: CallbackQuery):
    chat_id = call.message.chat.id
    user_states[chat_id] = {"step": 0, "score": 0, "history": []}
    send_question(chat_id, 0)

@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def handle_answer(call: CallbackQuery):
    chat_id = call.message.chat.id
    state = user_states.get(chat_id)

    if not state:
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏ /start üí¨")
        return

    selected = call.data.split("answer:")[1]
    step = state["step"]
    q = questions[step]

    # –æ—á–∏—Å—Ç–∏—Ç—å inline-–∫–Ω–æ–ø–∫–∏
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    state["history"].append(step)
    if selected == q["correct"]:
        state["score"] += 1
        bot.send_message(chat_id, "‚úÖ –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫... –ù–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ª—É—á—à–∞—è üíú")

    if q.get("after"):
        after = q["after"]
        if after["type"] == "text":
            bot.send_message(chat_id, after["content"])
        elif


r["type"] == "media":
            if after["media_type"] == "photo":
                bot.send_photo(chat_id, after["content"])

    # —Å—é—Ä–ø—Ä–∏–∑–Ω—ã–π –±–ª–æ–∫
    send_surprise(chat_id, step + 1)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    state["step"] += 1

    if state["step"] < len(questions):
        send_question(chat_id, state["step"])
    else:
        bot.send_message(
            chat_id,
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {state['score']} –∏–∑ {len(questions)} üíú"
        )
        bot.send_message(
            chat_id,
            "üéÅ –í–æ—Ç —Ç–≤–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑: https://t.me/your_gift_link"
        )
        bot.send_message(
            chat_id,
            "–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑?",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_test")
            )
        )

# ========== –ù–∞–∑–∞–¥ ==========

@bot.callback_query_handler(func=lambda call: call.data == "go_back")
def go_back(call: CallbackQuery):
    chat_id = call.message.chat.id
    state = user_states.get(chat_id)
    if state and state["history"]:
        last = state["history"].pop()
        state["step"] = last
        state["score"] = max(0, state["score"] - 1)
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
        send_question(chat_id, state["step"])
    else:
        bot.send_message(chat_id, "–≠—Ç–æ –±—ã–ª —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ü•∫")

# ========== –ó–∞–ø—É—Å–∫ ==========

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        sleep(5)
