from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler

TOKEN = 'YOUR_BOT_TOKEN'

questions = [
    {
        "question": "–ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞?",
        "options": ["–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥", "–î–æ–º–∞", "–ö–∞—Ñ–µ"],
        "correct": 0
    },
    {
        "question": "–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª–∞, –∫–æ–≥–¥–∞ –ø—Ä–∏—à–ª–∞ –≤–ø–µ—Ä–≤—ã–µ –∫–æ –º–Ω–µ –¥–æ–º–æ–π?",
        "options": ["–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É", "–°–º–æ—Ç—Ä–µ–ª–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä", "–ï–ª–∞ –ø–µ–ª—å–º–µ–Ω–∏"],
        "correct": 0
    },
    {
        "question": "–ü–µ—Ä–≤–æ–µ –Ω–∞—à–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        "options": ["–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ", "–°–≤–∞–¥—å–±–∞", "–ü—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–µ–ª–∫–∞"],
        "correct": 0
    },
    {
        "type": "riddle",
        "text": "üíå –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–≥–∞–¥–∫–∞:\n\n–û —á—ë–º-—Ç–æ –≤–∞–∂–Ω–æ–º –Ω–µ –∑–∞–±—É–¥—å ‚Äî\n–¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –º–æ–π –º–∞—Ä—à—Ä—É—Ç.\n–ü–ª–µ—á–æ –º–æ—ë ‚Äî –Ω–µ –Ω–∞ —Å–ª–æ–≤–∞—Ö,\n–¢—ã –º–æ–∂–µ—à—å –ø–æ–ª–æ–∂–∏—Ç—å—Å—è, –∫–∞–∫ —Ç–æ–≥–¥–∞‚Ä¶ ‚ù§Ô∏è",
        "photo_url": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/love_photo_1.png"
    },
    {
        "question": "–ü–µ—Ä–≤—ã–π –º–æ–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–µ–±—è, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–∏–∫–æ–º—É –Ω–µ –¥–∞—Ä–∏–ª –Ω–∏ –¥–æ, –Ω–∏ –ø–æ—Å–ª–µ?",
        "options": ["–¶–≤–µ—Ç—ã (51 –†–æ–∑–∞)", "–•—Ä–æ–º–æ—Å–æ–º—ã (47)", "–î–µ–Ω—å–≥–∏ (35 —Ç—ã—Å—è—á)"],
        "correct": 0
    },
    {
        "question": "–ú–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å –Ω–∞ Ozon –±—ã–ª —Å–≤—è–∑–∞–Ω —Å‚Ä¶?",
        "options": ["–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π", "–ò–≥—Ä—É—à–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏"],
        "correct": 0
    },
    {
        "question": "–ö–æ–≥–¥–∞ —Ç—ã –ø–æ–ø–∞–ª–∞ –≤ –±–æ–ª—å–Ω–∏—Ü—É, –∑–∞ –∫–∞–∫–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Ç—ã –ª—é–±–∏–ª–∞ –Ω–∞–±–ª—é–¥–∞—Ç—å?",
        "options": ["–†–∞—Å—Ç–≤–æ—Ä –º–∞—Ä–≥–∞–Ω—Ü–∞", "–ö–ª–∏–∑–º–∞", "–û—Å–º–æ—Ç—Ä –≥–æ—Ä–ª–∞"],
        "correct": 0
    },
    {
        "type": "riddle",
        "text": "‚ú® –ò–Ω–æ–≥–¥–∞ —Ç—ã –±–æ–ª–µ–ª–∞, –∏–Ω–æ–≥–¥–∞ –≥—Ä—É—Å—Ç–∏–ª–∞, –Ω–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–ª–∞ ‚Äî —è —Ä—è–¥–æ–º. –ò –¥–∞–∂–µ –∫–æ–≥–¥–∞ –±—ã–ª–æ —Ç—è–∂–µ–ª–æ, —è —Ç–æ–ø–∏–ª –∑–∞ —Ç–µ–±—è –≤—Å–µ–º —Å–µ—Ä–¥—Ü–µ–º.\n\n–¢—ã –Ω–µ –æ–¥–Ω–∞ ‚Äî –Ω–∏–∫–æ–≥–¥–∞. ‚ù§Ô∏è",
        "video_url": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/hospital_circle.mov"
    }
]

user_states = {}

def get_question_markup(index):
    question = questions[index]
    buttons = [
        [InlineKeyboardButton(text=opt, callback_data=f"answer:{index}:{i}")]
        for i, opt in enumerate(question["options"])
    ]
    if index > 0:
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    buttons.append([InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")])
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = 0
    await update.message.reply_text(
        "üíò –ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ?\n\n–ñ–º–∏ ¬´–ü–æ–µ—Ö–∞–ª–∏¬ª!",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–µ—Ö–∞–ª–∏!", callback_data="start")]])
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "start":
        user_states[user_id] = 0
        await send_question(query, user_id)

    elif query.data == "restart":
        user_states[user_id] = 0
        await query.message.reply_text("üîÅ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")
        await send_question(query, user_id)

    elif query.data == "back":
        user_states[user_id] = max(user_states[user_id] - 1, 0)
        await send_question(query, user_id)

    elif query.data.startswith("answer"):
        _, q_index, a_index = query.data.split(":")
        q_index, a_index = int(q_index), int(a_index)
        correct = questions[q_index]["correct"]
        result = "‚úÖ –í–µ—Ä–Ω–æ!" if a_index == correct else "‚ùå –ù–µ —Å–æ–≤—Å–µ–º..."
        await query.message.reply_text(result)

        user_states[user_id] += 1
        await send_question(query, user_id)

async def send_question(query, user_id):
    index = user_states[user_id]
    if index >= len(questions):
        await query.message.reply_text("üèÅ –≠—Ç–æ –±—ã–ª –∫–æ–Ω–µ—Ü —ç—Ç–æ–π —á–∞—Å—Ç–∏! –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞? üîÅ", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]))
        return

    q = questions[index]
    if "question" in q:
await query.message.reply_text(q["question"], reply_markup=get_question_markup(index))
    elif q.get("type") == "riddle":
        if "photo_url" in q:
            await query.message.reply_photo(photo=q["photo_url"], caption=q["text"])
        elif "video_url" in q:
            await query.message.reply_video(video=q["video_url"], caption=q["text"])
        user_states[user_id] += 1
        await send_question(query, user_id)

if name == '__main__':
    from telegram.ext import ApplicationBuilder
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()
