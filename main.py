import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CallbackContext, CallbackQueryHandler, CommandHandler, ContextTypes

TOKEN = "8222070472:AAHHZEU9SJISEMmmXvvCMHeUSPXcZy_JhO0"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

questions = [
    {
        "question": "‚ú® *–ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞...*\n–ü–æ–º–Ω–∏—à—å, –≥–¥–µ —ç—Ç–æ –±—ã–ª–æ?\n–ì–¥–µ –º—ã –≤–ø–µ—Ä–≤—ã–µ —É–≤–∏–¥–µ–ª–∏—Å—å?",
        "options": ["–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥", "–ú–æ–π –∏–Ω—Å—Ç–∏—Ç—É—Ç", "–ú–∞–≥–∞–∑–∏–Ω —É –¥–æ–º–∞"],
        "correct_option": 0
    },
    {
        "question": "üòå *–ö–æ–≥–¥–∞ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—à–ª–∞ –∫–æ –º–Ω–µ –¥–æ–º–æ–π‚Ä¶*\n–Ø –Ω–µ–º–Ω–æ–≥–æ –Ω–µ—Ä–≤–Ω–∏—á–∞–ª, –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ.\n–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª–∞ –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º? üôà",
        "options": ["–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É", "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–ª–∞ –º–æ—é –µ–¥—É –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ", "–°–ø–∞–ª–∞ –Ω–∞ –¥–∏–≤–∞–Ω–µ"],
        "correct_option": 0
    },
    {
        "question": "üéà *–ù–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ‚Ä¶*\n–Ø —Ç–∞–∫ —Å—Ç–∞—Ä–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º.\n–ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ?",
        "options": ["–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–ü–æ—Å–∏–¥–µ–ª–∫–∞ —Å –¥—Ä—É–∑—å—è–º–∏"],
        "correct_option": 0
    },
    {
        "is_riddle": True,
        "riddle_type": "love",
        "riddle_text": "–û–Ω–∞ —Ç–∏—Ö–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç, –Ω–µ –∫—Ä–∏—á–∏—Ç –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç.\n–û–Ω–∞ –≤ –º–µ–ª–æ—á–∞—Ö –∏ –≤–∑–≥–ª—è–¥–∞—Ö, –≤ —Ç–∏—à–∏–Ω–µ –∏ –≤ –æ–±—ä—è—Ç–∏—è—Ö.\n–ß—Ç–æ —ç—Ç–æ?",
        "riddle_answer": "–ù–∞—Å—Ç–æ—è—â–∞—è –ª—é–±–æ–≤—å ‚ù§Ô∏è",
        "image_url": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/love_photo_1.png",
        "riddle_response": "–ó–Ω–∞–µ—à—å, —è —á–∞—Å—Ç–æ –¥—É–º–∞–ª –æ —Ç–æ–º, –∫–∞–∫ –≤—Å—ë –Ω–∞—á–∞–ª–æ—Å—å.\n–¢—ã ‚Äî –º–æ—è –ø–µ—Ä–≤–∞—è –Ω–∞—Å—Ç–æ—è—â–∞—è –ª—é–±–æ–≤—å.\n–ò —è –≤—Å–µ–≥–¥–∞ —ç—Ç–æ –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å."
    },
    {
        "question": "ü•Ä *–ü–æ–º–Ω–∏—à—å –º–æ–π –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è?*\n–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–∏–∫–æ–º—É –Ω–µ –¥–∞—Ä–∏–ª —Ç–∞–∫–æ–µ –¥–æ —Ç–µ–±—è.\n–ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ?",
        "options": ["–¶–≤–µ—Ç—ã (51 —Ä–æ–∑–∞)", "–•—Ä–æ–º–æ—Å–æ–º—ã (47 üòÖ)", "–î–µ–Ω—å–≥–∏ (35 —Ç—ã—Å—è—á)"],
        "correct_option": 0
    },
    {
        "question": "üç¨ *–ú–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å –Ω–∞ –û–∑–æ–Ω–µ‚Ä¶*\n–í—Å—ë –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å —Å —á–µ–≥–æ-—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∏ –¥—É—à–µ–≤–Ω–æ–≥–æ.\n–° —á–µ–º –æ–Ω –±—ã–ª —Å–≤—è–∑–∞–Ω?",
        "options": ["–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π", "–ò–≥—Ä—É—à–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏"],
        "correct_option": 0
    },
    {
        "question": "üè• *–ö–æ–≥–¥–∞ —Ç—ã –ø–æ–ø–∞–ª–∞ –≤ –±–æ–ª—å–Ω–∏—Ü—É, —Ç—ã —á–∞—Å—Ç–æ —Å–º–æ—Ç—Ä–µ–ª–∞ –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å‚Ä¶*\n–ò —è –ø–æ–º–Ω—é —ç—Ç–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–æ–≥–¥–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–µ—Ä–µ–∂–∏–≤–∞–ª –∑–∞ —Ç–µ–±—è.\n–ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ?",
        "options": ["–†–∞—Å—Ç–≤–æ—Ä –º–∞—Ä–≥–∞–Ω—Ü–∞", "–ö–ª–∏–∑–º–∞", "–û—Å–º–æ—Ç—Ä –≥–æ—Ä–ª–∞"],
        "correct_option": 0
    },
    {
        "is_riddle": True,
        "riddle_type": "support",
        "riddle_text": "–≠—Ç–æ –Ω–µ –∑–æ–≤—É—Ç, –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–æ–º.\n–ù–µ –∫—Ä–∏—á–∏—Ç, –Ω–æ –≤—Å–µ–≥–¥–∞ —Å–ª—ã—à–∏—Ç.\n–¢—ã –Ω–µ –æ–¥–Ω–∞. –ß—Ç–æ —ç—Ç–æ?",
        "riddle_answer": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ù§Ô∏è",
        "video_url": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/hospital_circle.mov",
        "riddle_response": "–ß—Ç–æ –±—ã –Ω–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –º–µ–Ω—è.\n–Ø —Ä—è–¥–æ–º. –í—Å–µ–≥–¥–∞ –±—ã–ª –∏ –±—É–¥—É."
    }
]

user_data = {}

def get_question_keyboard(index):
    q = questions[index]
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(opt, callback_data=opt)] for opt in q["options"]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id] = 0
    await update.message.reply_text(
        "‚ù§Ô∏è –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –Ω–∞—à –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç –æ –Ω–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏. –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ —Ç—ã –≤—Å—ë –ø–æ–º–Ω–∏—à—å ü•π\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–µ—Ö–∞–ª–∏!", callback_data="start")]])
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "start":
        user_data[user_id] = 0
    elif query.data == "restart":
        user_data[user_id] = 0
        await query.message.reply_text("üîÅ –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!")
    
    index = user_data.get(user_id, 0)
    if index >= len(questions):
        await query.message.reply_text("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è üíñ")
        return

    q = questions[index]

    if q.get("type") == "puzzle":
        if "media" in q:
            if q["media"].endswith((".jpg", ".png", ".jpeg")):
                await query.message.reply_photo(photo=q["media"], caption=q["text"], reply_markup=get_question_keyboard(index))
            elif q["media"].endswith((".mp4", ".mov")):
                await query.message.reply_video(video=q["media"], caption=q["text"], reply_markup=get_question_keyboard(index))
        else:
            await query.message.reply_text(q["text"], reply_markup=get_question_keyboard(index))
        return

    await query.message.reply_text(q["text"], reply_markup=get_question_keyboard(index))
async def answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    index = user_data.get(user_id, 0)
    question = questions[index]
    correct = question["answer"]

    if query.data == correct:
        await query.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
        user_data[user_id] += 1
        await button_handler(update, context)
    else:
        await query.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(start|restart)$"))
    app.add_handler(CallbackQueryHandler(answer_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
