import telebot
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from time import sleep

API_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(API_TOKEN)

user_states = {}

# ===== –í–û–ü–†–û–°–´ + –ó–ê–ì–ê–î–ö–ê =====
questions = [
    {
        "question": "1. –ö–æ–≥–¥–∞ –±—ã–ª–∞ –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞?",
        "options": ["15 –∏—é–Ω—è", "30 –º–∞—è", "22 –∏—é–ª—è"],
        "correct_option": 0
    },
    {
        "question": "2. –ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª–∞, –∫–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—à–ª–∞ –∫–æ –º–Ω–µ –¥–æ–º–æ–π?",
        "options": ["–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É", "–û—Ç–∫—Ä—ã–ª–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "–°–º–æ—Ç—Ä–µ–ª–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä"],
        "correct_option": 0
    },
    {
        "question": "3. –ü–µ—Ä–≤–æ–µ –Ω–∞—à–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        "options": ["–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ", "–°–≤–∞–¥—å–±–∞", "–ü—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–µ–ª–∫–∞"],
        "correct_option": 0
    },
    {
        "type": "puzzle",
        "question": "‚ù§Ô∏è –ó–∞–≥–∞–¥–∫–∞ –ø—Ä–æ –ª—é–±–æ–≤—å",
        "text": "–û–Ω–æ –±–µ–∑ —Å–ª–æ–≤, –Ω–æ –≥–æ–≤–æ—Ä–∏—Ç. –ë–µ–∑ —Ä—É–∫ ‚Äî –Ω–æ –≥—Ä–µ–µ—Ç. –ë–µ–∑ –≤–∏–¥–∞ ‚Äî –Ω–æ –≤–∏–¥–Ω–æ. –ß—Ç–æ —ç—Ç–æ?",
        "answer": "–õ—é–±–æ–≤—å",
        "image": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/love_photo_1.png"
    },
    {
        "question": "4. –ü–µ—Ä–≤—ã–π –º–æ–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–µ–±—è, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–∏–∫–æ–≥–¥–∞ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–º—É –Ω–µ –¥–∞—Ä–∏–ª?",
        "options": ["–¶–≤–µ—Ç—ã (51 —Ä–æ–∑–∞)", "–•—Ä–æ–º–æ—Å–æ–º—ã (47)", "–î–µ–Ω—å–≥–∏ (35 —Ç—ã—Å—è—á)"],
        "correct_option": 0
    },
    {
        "question": "5. –ú–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å –Ω–∞ Ozon –±—ã–ª —Å–≤—è–∑–∞–Ω —Å‚Ä¶",
        "options": ["–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π", "–ò–≥—Ä—É—à–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏"],
        "correct_option": 0
    },
    {
        "question": "6. –ö–æ–≥–¥–∞ —Ç—ã –ª–µ–∂–∞–ª–∞ –≤ –±–æ–ª—å–Ω–∏—Ü–µ, —Ç–µ–±–µ –Ω—Ä–∞–≤–∏–ª–æ—Å—å –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞‚Ä¶",
        "options": ["–†–∞—Å—Ç–≤–æ—Ä–æ–º –º–∞—Ä–≥–∞–Ω—Ü–∞", "–ö–ª–∏–∑–º–æ–π", "–û—Å–º–æ—Ç—Ä–æ–º –≥–æ—Ä–ª–∞"],
        "correct_option": 0
    },
    {
        "type": "puzzle",
        "question": "ü§ç –ó–∞–≥–∞–¥–∫–∞ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
        "text": "–Ø –Ω–µ –≥–µ—Ä–æ–π, –Ω–µ –≤–æ–ª—à–µ–±–Ω–∏–∫ –∏ –Ω–µ —Å–ø–∞—Å–∞—Ç–µ–ª—å. –ù–æ –¥–∞–∂–µ –≤ –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ —Ç—ã –æ–¥–Ω–∞, —è —Ä—è–¥–æ–º. –ë—ã–ª, –µ—Å—Ç—å –∏ –±—É–¥—É –ø–ª–µ—á–æ–º ‚Äî –≤—Å–µ–≥–¥–∞. –ó–∞ —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–ø–æ–∫–æ–π–Ω–∞?",
        "answer": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        "video": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/hospital_circle.mov"
    }
]

# ========== –°–¢–ê–†–¢ ==========

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_states[message.chat.id] = {"step": 0, "score": 0, "history": []}
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, –º–æ—è —Ö–æ—Ä–æ—à–∞—è üíú\n–ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞—à —Ç—ë–ø–ª—ã–π —Ç–µ—Å—Ç?\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
        reply_markup=start_keyboard()
    )

def start_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöÄ –ü–æ–µ—Ö–∞–ª–∏!", callback_data="start_test"))
    return markup

# ========== –í–û–ü–†–û–°–´ ==========

def send_question(chat_id, step):
    q = questions[step]
    markup = InlineKeyboardMarkup()
    for opt in q["options"]:
        markup.add(InlineKeyboardButton(opt, callback_data=f"answer:{opt}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if step > 0:
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back"))
    bot.send_message(chat_id, q["text"], reply_markup=markup)

# ========== –û–¢–í–ï–¢–´ ==========

@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def handle_start_test(call: CallbackQuery):
    chat_id = call.message.chat.id
    user_states[chat_id] = {"step": 0, "score": 0, "history": []}
    send_question(chat_id, 0)

@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def handle_answer(call: CallbackQuery):
    chat_id = call.message.chat.id
    state = user_states.get(chat_id)

    if not state:
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏ /start üí¨")
        return

    selected = call.data.split("answer:")[1]
    step = state["step"]
    q = questions[step]

    # –æ—á–∏—Å—Ç–∏—Ç—å inline-–∫–Ω–æ–ø–∫–∏
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

    state["history"].append(step)
    if selected == q["correct"]:
        state["score"] += 1
        bot.send_message(chat_id, "‚úÖ –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫... –ù–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ª—É—á—à–∞—è üíú")

    if q.get("after"):
        after = q["after"]
        if after["type"] == "text":
            bot.send_message(chat_id, after["content"])
        elif after["type"] == "media":
            if after["media_type"] == "photo":
                bot.send_photo(chat_id, after["content"], caption=after.get("caption", ""))
            elif after["media_type"] == "video":
                bot.send_video(chat_id, after["content"])

    state["step"] += 1
    if state["step"] < len(questions):
        send_question(chat_id, state["step"])
    else:
        bot.send_message(
            chat_id,
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {state['score']} –∏–∑ {len(questions)} üíú"
        )
        bot.send_message(
            chat_id,
            "üéÅ –•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑?",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_test")
            )
        )

# ========== –ù–ê–ó–ê–î ==========

@bot.callback_query_handler(func=lambda call: call.data == "go_back")
def go_back(call: CallbackQuery):
    chat_id = call.message.chat.id
    state = user_states.get(chat_id)
    if state and state["history"]:
        last = state["history"].pop()
        state["step"] = last
        state["score"] = max(0, state["score"] - 1)
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
        send_question(chat_id, state["step"])
    else:
        bot.send_message(chat_id, "–≠—Ç–æ –±—ã–ª —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ü•∫")

# ========== –ó–ê–ü–£–°–ö ==========

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        sleep(5)
