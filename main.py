import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import (
    ApplicationBuilder, CallbackQueryHandler, CommandHandler,
    ContextTypes, MessageHandler, filters
)

# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
QUESTIONS = [
    {
        "question": "–ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞?",
        "options": ["–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥", "–ü–∞—Ä–∫", "–£–Ω–∏–≤–µ—Ä"],
        "answer": "–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥"
    },
    {
        "question": "–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª–∞, –∫–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—à–ª–∞ –∫–æ –º–Ω–µ –¥–æ–º–æ–π?",
        "options": ["–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É", "–°–º–æ—Ç—Ä–µ–ª–∞ —Ç–µ–ª–µ–∫", "–†—É–≥–∞–ª–∞—Å—å"],
        "answer": "–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É"
    },
    {
        "question": "–ü–µ—Ä–≤–æ–µ –Ω–∞—à–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        "options": ["–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–ü–æ—Å–∏–¥–µ–ª–∫–∞"],
        "answer": "–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è"
    },
    {
        "question": "–ü–µ—Ä–≤—ã–π –º–æ–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–µ–±—è, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–∏–∫–æ–º—É –±–æ–ª—å—à–µ –Ω–µ –¥–∞—Ä–∏–ª?",
        "options": ["–¶–≤–µ—Ç—ã (51 —Ä–æ–∑–∞)", "–•—Ä–æ–º–æ—Å–æ–º—ã (47)", "–î–µ–Ω—å–≥–∏ (35 —Ç—ã—Å)"],
        "answer": "–¶–≤–µ—Ç—ã (51 —Ä–æ–∑–∞)"
    },
    {
        "question": "–ú–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å –Ω–∞ –û–∑–æ–Ω–µ –±—ã–ª —Å–≤—è–∑–∞–Ω —Å...",
        "options": ["–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π", "–ò–≥—Ä—É—à–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏"],
        "answer": "–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π"
    },
    {
        "question": "–ö–æ–≥–¥–∞ —Ç—ã –ø–æ–ø–∞–ª–∞ –≤ –±–æ–ª—å–Ω–∏—Ü—É, —Ç–µ–±–µ –Ω—Ä–∞–≤–∏–ª–æ—Å—å –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞...",
        "options": ["–†–∞—Å—Ç–≤–æ—Ä–æ–º –º–∞—Ä–≥–∞–Ω—Ü–∞", "–ö–ª–∏–∑–º–æ–π", "–û—Å–º–æ—Ç—Ä–æ–º –≥–æ—Ä–ª–∞"],
        "answer": "–†–∞—Å—Ç–≤–æ—Ä–æ–º –º–∞—Ä–≥–∞–Ω—Ü–∞"
    },
]

PHOTO_URL = "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/love_photo_1.png"
VIDEO_URL = "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/hospital_circle.mov"

user_state = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_keyboard(options):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(text=opt, callback_data=opt)] for opt in options
    ] + [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = {"index": 0, "answers": []}
    await update.message.reply_text("‚ù§Ô∏è –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –º—ã –∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞!\n\n–ñ–º–∏ ¬´–ü–æ–µ—Ö–∞–ª–∏¬ª!", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ü–æ–µ—Ö–∞–ª–∏", callback_data="start_quiz")]
    ]))

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "restart":
        user_state[user_id] = {"index": 0, "answers": []}
        await query.message.reply_text("üîÅ –í—Å—ë –ø–æ –Ω–æ–≤–æ–π! –ñ–º–∏ ¬´–ü–æ–µ—Ö–∞–ª–∏¬ª", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ü–æ–µ—Ö–∞–ª–∏", callback_data="start_quiz")]
        ]))
        return

    if data == "start_quiz":
        await send_question(query, context, user_id)
        return

    if data == "back":
        if user_state[user_id]["index"] > 0:
            user_state[user_id]["index"] -= 1
        await send_question(query, context, user_id)
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    index = user_state[user_id]["index"]
    user_state[user_id]["answers"].append(data)
    user_state[user_id]["index"] += 1

    if user_state[user_id]["index"] == 3:
        await query.message.reply_photo(PHOTO_URL, caption="ü™Ñ –ó–∞–≥–∞–¥–∫–∞:\n–ß—Ç–æ –±—ã –Ω–∏ —Å–ª—É—á–∏–ª–æ—Å—å, –∑–Ω–∞–π ‚Äî –º–æ—ë –ø–ª–µ—á–æ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞–º —Å–ª–æ–∂–Ω–æ. –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –º–µ–Ω—è –≤—Å–µ–≥–¥–∞.")
        await send_question(query, context, user_id)
    elif user_state[user_id]["index"] == 6:
        await query.message.reply_video(VIDEO_URL, caption="üåÄ –ü–æ–º–Ω–∏—à—å —ç—Ç–æ –≤–∏–¥–µ–æ?.. –≠—Ç–æ –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –º–æ—ë–º —Å–µ—Ä–¥—Ü–µ.\n–ó–∞–≥–∞–¥–∫–∞: –ó–∞ —á—Ç–æ –±—ã —Ç—ã –º–µ–Ω—è –Ω–∏ –≤–∏–Ω–∏–ª–∞, —è –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—Å–µ–≥–¥–∞ –±—É–¥—É —Ä—è–¥–æ–º.")
        await send_question(query, context, user_id)
    elif user_state[user_id]["index"] < len(QUESTIONS):
        await send_question(query, context, user_id)
    else:
        await query.message.reply_text("üíñ –≠—Ç–æ –±—ã–ª–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã –ø—Ä–æ—à–ª–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –î–∞–ª—å—à–µ –±—É–¥–µ—Ç –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!")

async def send_question(query, context, user_id):
    index = user_state[user_id]["index"]
    q = QUESTIONS[index]
    text = f"{index+1}. {q['question']}"
    await query.message.reply_text(text, reply_markup=get_keyboard(q["options"]))

def main():
    from os import getenv
    TOKEN = getenv("BOT_TOKEN")

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))

    app.run_polling()

if __name__ == "__main__":
    main()
