import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
)

logging.basicConfig(level=logging.INFO)

# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
QUESTIONS = [
    {
        "question": "–ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞?",
        "options": ["–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥", "–ö–∞—Ñ–µ –≤ —Ü–µ–Ω—Ç—Ä–µ", "–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã"],
        "correct": "–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥"
    },
    {
        "question": "–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª–∞, –∫–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—à–ª–∞ –∫–æ –º–Ω–µ –¥–æ–º–æ–π?",
        "options": ["–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É", "–°–º–æ—Ç—Ä–µ–ª–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä", "–ó–∞—Å–Ω—É–ª–∞ —Å—Ä–∞–∑—É"],
        "correct": "–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É"
    },
    {
        "question": "–ü–µ—Ä–≤–æ–µ –Ω–∞—à–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        "options": ["–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ", "–°–≤–∞–¥—å–±–∞", "–ü—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–µ–ª–∫–∞"],
        "correct": "–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ"
    },
    {
        "question": "–ü–µ—Ä–≤—ã–π –º–æ–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–µ–±—è, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–∏–∫–æ–º—É –±–æ–ª—å—à–µ –Ω–µ –¥–∞—Ä–∏–ª?",
        "options": ["–¶–≤–µ—Ç—ã (51 —Ä–æ–∑–∞)", "–•—Ä–æ–º–æ—Å–æ–º—ã (47)", "–î–µ–Ω—å–≥–∏ (35 —Ç—ã—Å—è—á)"],
        "correct": "–¶–≤–µ—Ç—ã (51 —Ä–æ–∑–∞)"
    },
    {
        "question": "–ú–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å –Ω–∞ –û–∑–æ–Ω–µ —Å —á–µ–º –±—ã–ª —Å–≤—è–∑–∞–Ω?",
        "options": ["–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π", "–ò–≥—Ä—É—à–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏"],
        "correct": "–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π"
    },
    {
        "question": "–ö–æ–≥–¥–∞ —Ç—ã –±—ã–ª–∞ –≤ –±–æ–ª—å–Ω–∏—Ü–µ, –∑–∞ —á–µ–º –ª—é–±–∏–ª–∞ –Ω–∞–±–ª—é–¥–∞—Ç—å?",
        "options": ["–†–∞—Å—Ç–≤–æ—Ä –º–∞—Ä–≥–∞–Ω—Ü–∞", "–ö–ª–∏–∑–º–∞", "–û—Å–º–æ—Ç—Ä –≥–æ—Ä–ª–∞"],
        "correct": "–†–∞—Å—Ç–≤–æ—Ä –º–∞—Ä–≥–∞–Ω—Ü–∞"
    }
]

# –ó–∞–≥–∞–¥–∫–∏
RIDDLES = {
    3: {
        "text": "–ó–∞–≥–∞–¥–∫–∞ –ø—Ä–æ –ª—é–±–æ–≤—å: \n\n–≠—Ç–æ —á—É–≤—Å—Ç–≤–æ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫,\n–ß—Ç–æ —Ä–∞—Å—Ç—ë—Ç —Å –∫–∞–∂–¥—ã–º –¥–µ–Ω—å–∫–æ–º.\n–ù–µ–∑–∞–º–µ—Ç–Ω–æ, –Ω–æ –≤—Å–µ—Ä—å—ë–∑,\n–¢—ã –∏ —è ‚Äî –∏ –Ω–µ—Ç —É–≥—Ä–æ–∑ üíû",
        "image": "love_photo_1.png"
    },
    6: {
        "text": "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –º–µ–Ω—è. –î–∞–∂–µ –∫–æ–≥–¥–∞ –≤—Å—ë —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å –∏ —á—É–≤—Å—Ç–≤–∞ –±—ã–ª–∏ –µ—â—ë –Ω–µ —Ç–∞–∫–∏–º–∏ —Å–∏–ª—å–Ω—ã–º–∏, —è —É–∂–µ –±—ã–ª —Ä—è–¥–æ–º. –ò –±—É–¥—É –≤—Å–µ–≥–¥–∞. –ù–∞–≤—Å–µ–≥–¥–∞.",
        "video": "hospital_circle.mov"
    }
}

STATE = {"index": 0, "history": []}

def get_keyboard(index):
    q = QUESTIONS[index]
    keyboard = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in q["options"]]
    if index > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    keyboard.append([InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")])
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    STATE["index"] = 0
    STATE["history"] = []
    await update.message.reply_text("üå∏ –ü—Ä–∏–≤–µ—Ç, –ª—é–±–∏–º–∞—è! –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –º—ã –∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ üòä\n\n–ì–æ—Ç–æ–≤–∞?", reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ü–æ–µ—Ö–∞–ª–∏!", callback_data="start")]]
    ))

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "start":
        STATE["index"] = 0
        STATE["history"] = []
        q = QUESTIONS[STATE["index"]]
        await query.message.reply_text(q["question"], reply_markup=get_keyboard(STATE["index"]))
        return

    if data == "restart":
        STATE["index"] = 0
        STATE["history"] = []
        await query.message.reply_text("üîÅ –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!")
        q = QUESTIONS[STATE["index"]]
        await query.message.reply_text(q["question"], reply_markup=get_keyboard(STATE["index"]))
        return

    if data == "back":
        if STATE["index"] > 0:
            STATE["index"] -= 1
            STATE["history"].pop()
        q = QUESTIONS[STATE["index"]]
        await query.message.reply_text(q["question"], reply_markup=get_keyboard(STATE["index"]))
        return

    current_q = QUESTIONS[STATE["index"]]
    STATE["history"].append({"question": current_q["question"], "answer": data})

    if data == current_q["correct"]:
        await query.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await query.message.reply_text(f"‚ùå –ù–µ–∞. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['correct']}")

    STATE["index"] += 1

    if STATE["index"] in RIDDLES:
        riddle = RIDDLES[STATE["index"]]
        await query.message.reply_text("üß© –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–≥–∞–¥–∫–∞!")
        await query.message.reply_text(riddle["text"])
        if "image" in riddle:
            with open(riddle["image"], "rb") as f:
                await query.message.reply_photo(f)
        if "video" in riddle:
            with open(riddle["video"], "rb") as f:
                await query.message.reply_video(f)

    if STATE["index"] < len(QUESTIONS):
        q = QUESTIONS[STATE["index"]]
        await query.message.reply_text(q["question"], reply_markup=get_keyboard(STATE["index"]))
    else:
        await query.message.reply_text("üéâ –≠—Ç–æ –±—ã–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—à–ª–∞ —ç—Ç–æ—Ç –ø—É—Ç—å —Å–æ –º–Ω–æ–π ‚ù§Ô∏è")

if __name__ == "__main__":
    app = ApplicationBuilder().token("YOUR_TOKEN_HERE").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_answer))
    app.run_polling()
