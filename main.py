import telebot
import os
from time import sleep

API_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(API_TOKEN)

user_states = {}

questions = [
    {
        "text": "üìç –í–æ–ø—Ä–æ—Å 1:\n–ì–¥–µ –±—ã–ª–∞ –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞?\n–∞) –í –ø–∞—Ä–∫–µ\n–±) –£ –º–µ–Ω—è –¥–æ–º–∞\n–≤) –£ —Ç–≤–æ–µ–≥–æ –ø–æ–¥—ä–µ–∑–¥–∞",
        "correct": "–≤",
        "after": None
    },
    {
        "text": "üìç –í–æ–ø—Ä–æ—Å 2:\n–ß—Ç–æ —è —Ç–µ–±–µ –ø–æ–¥–∞—Ä–∏–ª –≤ —Ç–æ—Ç –¥–µ–Ω—å?\n–∞) –ë—Ä–∞—Å–ª–µ—Ç\n–±) –ü–∏—Å—å–º–æ\n–≤) –û–±—ä—è—Ç–∏–µ",
        "correct": "–≤",
        "after": {
            "type": "text",
            "content": "üíå –≠—Ç–æ –∏ –ø—Ä–∞–≤–¥–∞ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è—Ç–∏–µ... –Ω–æ —Å –æ–≥—Ä–æ–º–Ω–æ–π —Ç–µ–ø–ª–æ—Ç–æ–π. –Ø –¥–æ —Å–∏—Ö –ø–æ—Ä —ç—Ç–æ –ø–æ–º–Ω—é ü´Ç"
        }
    },
    {
        "text": "üìç –í–æ–ø—Ä–æ—Å 3:\n–ß—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é, –∫–æ–≥–¥–∞ —Ç—ã —Ä—è–¥–æ–º?\n–∞) –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ\n–±) –í–æ–ª–Ω–µ–Ω–∏–µ\n–≤) –í—Å—ë —Å—Ä–∞–∑—É",
        "correct": "–≤",
        "after": {
            "type": "media",
            "media_type": "photo",
            "content": "https://telegra.ph/file/your_image_link.jpg"
        }
    }
]

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_states[message.chat.id] = {"step": 0, "score": 0}
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç, –º–æ—è —Ö–æ—Ä–æ—à–∞—è üíú\n–ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞—à —Ç—ë–ø–ª—ã–π —Ç–µ—Å—Ç?\n–ù–∞–ø–∏—à–∏ '–ü–æ–µ—Ö–∞–ª–∏'!")

@bot.message_handler(func=lambda m: m.text.lower() == "–ø–æ–µ—Ö–∞–ª–∏")
def start_test(message):
    user_states[message.chat.id]["step"] = 0
    bot.send_message(message.chat.id, questions[0]["text"])

@bot.message_handler(func=lambda m: True)
def handle_answer(message):
    state = user_states.get(message.chat.id)

    if not state:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ üí¨")
        return

    step = state["step"]

    if step >= len(questions):
        bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –ø—Ä–æ—à–ª–∞ —Ç–µ—Å—Ç üòä")
        return

    correct = questions[step]["correct"]
    if message.text.strip().lower() == correct:
        state["score"] += 1
        bot.send_message(message.chat.id, "‚úÖ –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫... –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ —É–ª—ã–±–∞—é—Å—å, –≤–µ–¥—å —Ç—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—è üòå")

    after = questions[step].get("after")
    if after:
        if after["type"] == "text":
            bot.send_message(message.chat.id, after["content"])
        elif after["type"] == "media":
            if after["media_type"] == "photo":
                bot.send_photo(message.chat.id, after["content"])

    state["step"] += 1

    if state["step"] < len(questions):
        bot.send_message(message.chat.id, questions[state["step"]]["text"])
    else:
        bot.send_message(
            message.chat.id,
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n–¢—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {state['score']} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ üíú"
        )
        bot.send_message(
            message.chat.id,
            "üéÅ –í–æ—Ç —Ç–µ–±–µ –º–∞–ª–µ–Ω—å–∫–∏–π —Å—é—Ä–ø—Ä–∏–∑: https://t.me/your_gift_link\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—à–ª–∞ ‚Äî —Ç—ã –¥–ª—è –º–µ–Ω—è –≤—Å—ë."
        )

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        sleep(5)