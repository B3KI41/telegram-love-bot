import telebot
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from time import sleep

API_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(API_TOKEN)

user_states = {}

# ===== –í–û–ü–†–û–°–´ + –ó–ê–ì–ê–î–ö–ê =====
questions = [
    {
        "text": "üìç –í–æ–ø—Ä–æ—Å 1:\n–ì–¥–µ –±—ã–ª–∞ –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞?",
        "options": ["–í –ø–∞—Ä–∫–µ", "–£ –º–µ–Ω—è –¥–æ–º–∞", "–£ —Ç–≤–æ–µ–≥–æ –ø–æ–¥—ä–µ–∑–¥–∞"],
        "correct": "–£ —Ç–≤–æ–µ–≥–æ –ø–æ–¥—ä–µ–∑–¥–∞",
        "after": None
    },
    {
        "text": "üìç –í–æ–ø—Ä–æ—Å 2:\n–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª–∞, –∫–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—à–ª–∞ –∫–æ –º–Ω–µ –¥–æ–º–æ–π?",
        "options": ["–û—Ç–∫—Ä—ã–ª–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É", "–°–º–æ—Ç—Ä–µ–ª–∞ —Ç–µ–ª–µ–∫"],
        "correct": "–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É",
        "after": None
    },
    {
        "text": "üìç –í–æ–ø—Ä–æ—Å 3:\n–ù–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        "options": ["–°–≤–∞–¥—å–±–∞", "–ü—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–µ–ª–∫–∞", "–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è"],
        "correct": "–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è",
        "after": None
    },
    {
        "text": "üß© –ó–∞–≥–∞–¥–∫–∞ #1:\n–Ø –Ω–µ —á–µ–ª–æ–≤–µ–∫ –∏ –Ω–µ –≤–µ—â—å, –Ω–æ —è –≥—Ä–µ—é –Ω–∞—Å –¥–∞–∂–µ –≤ —Ç–∏—à–∏–Ω–µ...\n–ß—Ç–æ —ç—Ç–æ?",
        "options": ["–õ—é–±–æ–≤—å", "–ö–æ—à–∫–∞", "–û–¥–µ—è–ª–æ"],
        "correct": "–õ—é–±–æ–≤—å",
        "type": "puzzle",
        "after": {
            "type": "media",
            "media_type": "photo",
            "content": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/love_photo_1.png",
            "caption": (
                "‚ù§Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–∞ –ª—é–±–æ–≤—å. –°–∞–º–∞—è –Ω–∞—Å—Ç–æ—è—â–∞—è.\n"
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å —ç—Ç–æ –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π.\n\n"
                "üì∏ –ò –≤–æ—Ç –æ–¥–Ω–æ –∏–∑ —Ç–µ—Ö –º–≥–Ω–æ–≤–µ–Ω–∏–π, –≥–¥–µ —ç—Ç–∞ –ª—é–±–æ–≤—å –±—ã–ª–∞ –≤ –∫–∞–∂–¥–æ–º –≤–∑–≥–ª—è–¥–µ‚Ä¶"
            )
        }
    }
]

# ========== –°–¢–ê–†–¢ ==========

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_states[message.chat.id] = {"step": 0, "score": 0, "history": []}
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, –º–æ—è —Ö–æ—Ä–æ—à–∞—è üíú\n–ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞—à —Ç—ë–ø–ª—ã–π —Ç–µ—Å—Ç?\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
        reply_markup=start_keyboard()
    )

def start_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöÄ –ü–æ–µ—Ö–∞–ª–∏!", callback_data="start_test"))
    return markup

# ========== –í–û–ü–†–û–°–´ ==========

def send_question(chat_id, step):
    q = questions[step]
    markup = InlineKeyboardMarkup()
    for opt in q["options"]:
        markup.add(InlineKeyboardButton(opt, callback_data=f"answer:{opt}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if step > 0:
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back"))
    bot.send_message(chat_id, q["text"], reply_markup=markup)

# ========== –û–¢–í–ï–¢–´ ==========

@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def handle_start_test(call: CallbackQuery):
    chat_id = call.message.chat.id
    user_states[chat_id] = {"step": 0, "score": 0, "history": []}
    send_question(chat_id, 0)

@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def handle_answer(call: CallbackQuery):
    chat_id = call.message.chat.id
    state = user_states.get(chat_id)

    if not state:
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏ /start üí¨")
        return

    selected = call.data.split("answer:")[1]
    step = state["step"]
    q = questions[step]

    # –æ—á–∏—Å—Ç–∏—Ç—å inline-–∫–Ω–æ–ø–∫–∏
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

    state["history"].append(step)
    if selected == q["correct"]:
        state["score"] += 1
        bot.send_message(chat_id, "‚úÖ –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫... –ù–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ª—É—á—à–∞—è üíú")

    if q.get("after"):
        after = q["after"]
        if after["type"] == "text":
            bot.send_message(chat_id, after["content"])
        elif after["type"] == "media":
            if after["media_type"] == "photo":
                bot.send_photo(chat_id, after["content"], caption=after.get("caption", ""))
            elif after["media_type"] == "video":
                bot.send_video(chat_id, after["content"])

    state["step"] += 1
    if state["step"] < len(questions):
        send_question(chat_id, state["step"])
    else:
        bot.send_message(
            chat_id,
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {state['score']} –∏–∑ {len(questions)} üíú"
        )
        bot.send_message(
            chat_id,
            "üéÅ –•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑?",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_test")
            )
        )

# ========== –ù–ê–ó–ê–î ==========

@bot.callback_query_handler(func=lambda call: call.data == "go_back")
def go_back(call: CallbackQuery):
    chat_id = call.message.chat.id
    state = user_states.get(chat_id)
    if state and state["history"]:
        last = state["history"].pop()
        state["step"] = last
        state["score"] = max(0, state["score"] - 1)
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
        send_question(chat_id, state["step"])
    else:
        bot.send_message(chat_id, "–≠—Ç–æ –±—ã–ª —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ü•∫")

# ========== –ó–ê–ü–£–°–ö ==========

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        sleep(5)
