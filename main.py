
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler

TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–≥–∞–¥–∫–∏
questions = [
    {
        "question": "1. –ö–æ–≥–¥–∞ –±—ã–ª–∞ –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞?",
        "options": ["15 –∏—é–Ω—è", "30 –º–∞—è", "22 –∏—é–ª—è"],
        "correct_option": 0
    },
    {
        "question": "2. –ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª–∞, –∫–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—à–ª–∞ –∫–æ –º–Ω–µ –¥–æ–º–æ–π?",
        "options": ["–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É", "–û—Ç–∫—Ä—ã–ª–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "–°–º–æ—Ç—Ä–µ–ª–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä"],
        "correct_option": 0
    },
    {
        "question": "3. –ü–µ—Ä–≤–æ–µ –Ω–∞—à–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        "options": ["–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ", "–°–≤–∞–¥—å–±–∞", "–ü—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–µ–ª–∫–∞"],
        "correct_option": 0
    },
    {
        "type": "puzzle",
        "question": "‚ù§Ô∏è –ó–∞–≥–∞–¥–∫–∞ –ø—Ä–æ –ª—é–±–æ–≤—å",
        "text": "–û–Ω–æ –±–µ–∑ —Å–ª–æ–≤, –Ω–æ –≥–æ–≤–æ—Ä–∏—Ç. –ë–µ–∑ —Ä—É–∫ ‚Äî –Ω–æ –≥—Ä–µ–µ—Ç. –ë–µ–∑ –≤–∏–¥–∞ ‚Äî –Ω–æ –≤–∏–¥–Ω–æ. –ß—Ç–æ —ç—Ç–æ?",
        "answer": "–õ—é–±–æ–≤—å",
        "image": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/love_photo_1.png"
    },
    {
        "question": "4. –ü–µ—Ä–≤—ã–π –º–æ–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–µ–±—è, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–∏–∫–æ–≥–¥–∞ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–º—É –Ω–µ –¥–∞—Ä–∏–ª?",
        "options": ["–¶–≤–µ—Ç—ã (51 —Ä–æ–∑–∞)", "–•—Ä–æ–º–æ—Å–æ–º—ã (47)", "–î–µ–Ω—å–≥–∏ (35 —Ç—ã—Å—è—á)"],
        "correct_option": 0
    },
    {
        "question": "5. –ú–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å –Ω–∞ Ozon –±—ã–ª —Å–≤—è–∑–∞–Ω —Å‚Ä¶",
        "options": ["–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π", "–ò–≥—Ä—É—à–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏"],
        "correct_option": 0
    },
    {
        "question": "6. –ö–æ–≥–¥–∞ —Ç—ã –ª–µ–∂–∞–ª–∞ –≤ –±–æ–ª—å–Ω–∏—Ü–µ, —Ç–µ–±–µ –Ω—Ä–∞–≤–∏–ª–æ—Å—å –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞‚Ä¶",
        "options": ["–†–∞—Å—Ç–≤–æ—Ä–æ–º –º–∞—Ä–≥–∞–Ω—Ü–∞", "–ö–ª–∏–∑–º–æ–π", "–û—Å–º–æ—Ç—Ä–æ–º –≥–æ—Ä–ª–∞"],
        "correct_option": 0
    },

    {
        "type": "puzzle",
        "question": "ü§ç –ó–∞–≥–∞–¥–∫–∞ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
        "text": "–Ø –Ω–µ –≥–µ—Ä–æ–π, –Ω–µ –≤–æ–ª—à–µ–±–Ω–∏–∫ –∏ –Ω–µ —Å–ø–∞—Å–∞—Ç–µ–ª—å. –ù–æ –¥–∞–∂–µ –≤ –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ —Ç—ã –æ–¥–Ω–∞, —è —Ä—è–¥–æ–º. –ë—ã–ª, –µ—Å—Ç—å –∏ –±—É–¥—É –ø–ª–µ—á–æ–º ‚Äî –≤—Å–µ–≥–¥–∞. –ó–∞ —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–ø–æ–∫–æ–π–Ω–∞?",
        "answer": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        "video": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/hospital_circle.mov"
    }
]

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state[update.effective_user.id] = {"q": 0}
    await send_question(update, context)

def get_keyboard(q_index):
    q = questions[q_index]
    if "options" in q:
        keyboard = [[InlineKeyboardButton(opt, callback_data=f"answer:{i}")] for i, opt in enumerate(q["options"])]
    else:
        keyboard = [[InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    if q_index > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(keyboard)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id, {"q": 0})
    q_index = state["q"]
    q = questions[q_index]

    if "options" in q:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=q["question"], reply_markup=get_keyboard(q_index))
    elif q.get("type") == "puzzle":
        await context.bot.send_message(chat_id=update.effective_chat.id, text=q["text"])
        if "image" in q:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=q["image"])
        elif "video" in q:
            await context.bot.send_video(chat_id=update.effective_chat.id, video=q["video"])
        await context.bot.send_message(chat_id=update.effective_chat.id, text="üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", reply_markup=get_keyboard(q_index))

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    state = user_state.get(user_id, {"q": 0})

    if data.startswith("answer:"):
        selected = int(data.split(":")[1])
        current_q = questions[state["q"]]
        correct = current_q["correct_option"]
        if selected == correct:
            await query.edit_message_text(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {current_q['options'][correct]}")
        else:
            await query.edit_message_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['options'][correct]}")
        state["q"] += 1
        user_state[user_id] = state
        if state["q"] < len(questions):
            await send_question(update, context)
    elif data == "back":
        if state["q"] > 0:
            state["q"] -= 1
            await send_question(update, context)
    elif data == "restart":
        state["q"] = 0
        await send_question(update, context)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.run_polling()
