import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CallbackContext, CallbackQueryHandler, CommandHandler, ContextTypes

TOKEN = "8222070472:AAHHZEU9SJISEMmmXvvCMHeUSPXcZy_JhO0"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

questions = [
    {
        "text": "–ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞?",
        "options": ["–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥", "–£–Ω–∏–≤–µ—Ä–º–∞–≥", "–ö–ª—É–±"],
        "answer": "–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥"
    },
    {
        "text": "–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª–∞, –∫–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—à–ª–∞ –∫–æ –º–Ω–µ –¥–æ–º–æ–π?",
        "options": ["–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É", "–ö–ª–µ–∏–ª–∞ –æ–±–æ–∏", "–°–º–æ—Ç—Ä–µ–ª–∞ –≤ –∑–µ—Ä–∫–∞–ª–æ"],
        "answer": "–¢—Ä–æ–≥–∞–ª–∞ –º–æ—é –≥–æ–ª–æ–≤—É"
    },
    {
        "text": "–ü–µ—Ä–≤–æ–µ –Ω–∞—à–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        "options": ["–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ", "–°–≤–∞–¥—å–±–∞", "–ü—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–µ–ª–∫–∞"],
        "answer": "–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ"
    },
    {
        "type": "puzzle",
        "text": "–ó–∞–≥–∞–¥–∫–∞: –ù–∞—Å –º–∞–ª–æ —Å–≤—è–∑—ã–≤–∞–ª–æ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ. –ù–æ —Ç—ã –∑–Ω–∞–ª–∞: —è —Ä—è–¥–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–ª—á—É. –î–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –≤ –±–æ–ª—å–Ω–∏—Ü–µ, –≤ —Å–ª–µ–∑–∞—Ö, –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ ‚Äî –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –æ–¥–Ω–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç–µ–±–µ —Å–ø–æ–∫–æ–π–Ω–æ.\n\n–ß—Ç–æ —ç—Ç–æ?",
        "options": ["–¢–≤–æ—ë –ø–ª–µ—á–æ", "–ü–ª–µ–¥", "–¢–µ–ª–µ—Ñ–æ–Ω"],
        "answer": "–¢–≤–æ—ë –ø–ª–µ—á–æ",
        "media": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/love_photo_1.png"
    },
    {
        "text": "–ü–µ—Ä–≤—ã–π –º–æ–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–µ–±—è, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–∏–∫–æ–º—É –±–æ–ª—å—à–µ –Ω–µ –¥–∞—Ä–∏–ª?",
        "options": ["–¶–≤–µ—Ç—ã (51 —Ä–æ–∑–∞)", "–•—Ä–æ–º–æ—Å–æ–º—ã (47)", "–î–µ–Ω—å–≥–∏ (35 —Ç—ã—Å—è—á)"],
        "answer": "–¶–≤–µ—Ç—ã (51 —Ä–æ–∑–∞)"
    },
    {
        "text": "–ú–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å –Ω–∞ Ozon —Å —á–µ–º –±—ã–ª —Å–≤—è–∑–∞–Ω?",
        "options": ["–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π", "–ò–≥—Ä—É—à–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏"],
        "answer": "–ù–∞–±–æ—Ä—ã —Å–ª–∞–¥–æ—Å—Ç–µ–π"
    },
    {
        "text": "–ö–æ–≥–¥–∞ —Ç—ã –ø–æ–ø–∞–ª–∞ –≤ –±–æ–ª—å–Ω–∏—Ü—É, —Ç—ã –ª—é–±–∏–ª–∞ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –æ–¥–Ω–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ö–∞–∫–∏–º?",
        "options": ["–†–∞—Å—Ç–≤–æ—Ä –º–∞—Ä–≥–∞–Ω—Ü–∞", "–ö–ª–∏–∑–º–∞", "–û—Å–º–æ—Ç—Ä –≥–æ—Ä–ª–∞"],
        "answer": "–†–∞—Å—Ç–≤–æ—Ä –º–∞—Ä–≥–∞–Ω—Ü–∞"
    },
    {
        "type": "puzzle",
        "text": "–ó–∞–≥–∞–¥–∫–∞: –ß—Ç–æ –±—ã –Ω–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ ‚Äî —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ–ø–µ—Ä–µ—Ç—å—Å—è –Ω–∞ –º–µ–Ω—è. –ù–µ –≤–∞–∂–Ω–æ, –∫–∞–∫ –¥–∞–ª–µ–∫–æ, –Ω–µ –≤–∞–∂–Ω–æ, —á—Ç–æ –º–µ–∂–¥—É –Ω–∞–º–∏. –Ø —Ä—è–¥–æ–º. –í—Å–µ–≥–¥–∞.\n\n–ß—Ç–æ —ç—Ç–æ?",
        "options": ["–ú–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü—Ä–æ—à–ª–æ–µ", "–ü–ª–µ–¥"],
        "answer": "–ú–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "media": "https://raw.githubusercontent.com/B3KI41/telegram-love-bot/main/hospital_circle.mov"
    }
]

user_data = {}

def get_question_keyboard(index):
    q = questions[index]
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(opt, callback_data=opt)] for opt in q["options"]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id] = 0
    await update.message.reply_text(
        "‚ù§Ô∏è –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –Ω–∞—à –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç –æ –Ω–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏. –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ —Ç—ã –≤—Å—ë –ø–æ–º–Ω–∏—à—å ü•π\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–µ—Ö–∞–ª–∏!", callback_data="start")]])
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "start":
        user_data[user_id] = 0
    elif query.data == "restart":
        user_data[user_id] = 0
        await query.message.reply_text("üîÅ –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!")
    
    index = user_data.get(user_id, 0)
    if index >= len(questions):
        await query.message.reply_text("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è üíñ")
        return

    q = questions[index]

    if q.get("type") == "puzzle":
        if "media" in q:
            if q["media"].endswith((".jpg", ".png", ".jpeg")):
                await query.message.reply_photo(photo=q["media"], caption=q["text"], reply_markup=get_question_keyboard(index))
            elif q["media"].endswith((".mp4", ".mov")):
                await query.message.reply_video(video=q["media"], caption=q["text"], reply_markup=get_question_keyboard(index))
        else:
            await query.message.reply_text(q["text"], reply_markup=get_question_keyboard(index))
        return

    await query.message.reply_text(q["text"], reply_markup=get_question_keyboard(index))
async def answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    index = user_data.get(user_id, 0)
    question = questions[index]
    correct = question["answer"]

    if query.data == correct:
        await query.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
        user_data[user_id] += 1
        await button_handler(update, context)
    else:
        await query.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(start|restart)$"))
    app.add_handler(CallbackQueryHandler(answer_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
