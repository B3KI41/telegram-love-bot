import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes

TOKEN = "8222070472:AAHHZEU9SJISEMmmXvvCMHeUSPXcZy_JhO0"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–æ–ø—Ä–æ—Å—ã, –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –≤—Å—Ç–∞–≤–∫–∏ –∏ –º–µ–¥–∏–∞
QUESTIONS = [
    {
        "text": "1Ô∏è‚É£ –ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ üåÜ",
        "options": ["–£–Ω–∏–≤–µ—Ä", "–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥", "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "–ú–∞–≥–∞–∑–∏–Ω —É –¥–æ–º–∞"],
        "correct": "–¢–≤–æ–π –ø–æ–¥—ä–µ–∑–¥",
    },
    {
        "text": "2Ô∏è‚É£ –ß—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª–∞ –ø–æ—Å–ª–µ –Ω–∞—à–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–∏? üí¨",
        "options": ["–ù—É‚Ä¶ –Ω–æ—Ä–º–∞–ª—å–Ω–æ", "–¢—ã –º–∏–ª—ã–π", "–Ø —É—Å—Ç–∞–ª–∞", "–ë—ã–ª–æ –∑–¥–æ—Ä–æ–≤–æ"],
        "correct": "–ë—ã–ª–æ –∑–¥–æ—Ä–æ–≤–æ",
    },
    {
        "text": "3Ô∏è‚É£ –ö–∞–∫–∞—è –ø–µ—Å–Ω—è —Å—Ç–∞–ª–∞ ¬´–Ω–∞—à–µ–π¬ª –ø–µ—Ä–≤–æ–π? üé∂",
        "options": ["–ê—Ä—Ç–µ–º –ö–∞—á–µ—Ä ‚Äì –î–µ–≤–æ—á–∫–∞", "Jony ‚Äì –ö–æ–º–µ—Ç–∞", "Miyagi ‚Äì Minor", "–ú–∞–∫—Å –ö–æ—Ä–∂ ‚Äì –ú–∞–ª—ã–π –ø–æ–≤–∑—Ä–æ—Å–ª–µ–ª"],
        "correct": "Jony ‚Äì –ö–æ–º–µ—Ç–∞",
    },
    {
        "insert": {
            "type": "puzzle",
            "question": "‚ù§Ô∏è –ó–∞–≥–∞–¥–∫–∞: –ß—Ç–æ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, –¥–∞–∂–µ –≤ –º–æ–ª—á–∞–Ω–∏–∏? –ß—Ç–æ –≥—Ä–µ–µ—Ç –¥—É—à—É, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ö–æ–ª–æ–¥–Ω–æ? –ß—Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, –¥–∞–∂–µ –Ω–µ –≤–∏–¥—è?..",
            "options": ["–õ—é–±–æ–≤—å", "–ü–æ–Ω–∏–º–∞–Ω–∏–µ", "–°–ª–æ–≤–∞", "–¢–∏—à–∏–Ω–∞"],
            "correct": "–õ—é–±–æ–≤—å",
            "after_text": "–≠—Ç–æ –±—ã–ª–∞ –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –Ω–∞—Å—Ç–æ—è—â–∞—è –ª—é–±–æ–≤—å‚Ä¶ –ß–∏—Å—Ç–∞—è, –∏—Å–∫—Ä–µ–Ω–Ω—è—è, –∫–∞–∫ —Ç–æ—Ç –≤–µ—á–µ—Ä, –∫–æ–≥–¥–∞ –º—ã –ø—Ä–æ—Å—Ç–æ —Å–∏–¥–µ–ª–∏ —Ä—è–¥–æ–º ‚Äî –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –Ω—É–∂–Ω–æ.",
            "media": {
                "type": "photo",
                "path": "media/love_photo.jpg"  # –ü—É—Ç—å –∫ –≤–∞—à–µ–π –æ–±—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            }
        }
    },
    {
        "text": "4Ô∏è‚É£ –ß—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ü–µ–Ω–∏—à—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö? üíû",
        "options": ["–ß–µ—Å—Ç–Ω–æ—Å—Ç—å", "–ó–∞–±–æ—Ç–∞", "–ü–æ–¥–∞—Ä–∫–∏", "–í–Ω–∏–º–∞–Ω–∏–µ"],
        "correct": "–ó–∞–±–æ—Ç–∞",
    },
    {
        "text": "5Ô∏è‚É£ –ö–æ–≥–¥–∞ —è –≤–ø–µ—Ä–≤—ã–µ —Ç–µ–±–µ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –ª—é–±–ª—é? üíå",
        "options": ["–í–µ—á–µ—Ä–æ–º –≤ –º–∞—à–∏–Ω–µ", "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–ù–∞ –ø—Ä–æ–≥—É–ª–∫–µ", "–í –ø–µ—Ä–µ–ø–∏—Å–∫–µ"],
        "correct": "–í–µ—á–µ—Ä–æ–º –≤ –º–∞—à–∏–Ω–µ",
    },
    {
        "text": "6Ô∏è‚É£ –ß—Ç–æ —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ –∑–∞–ø–æ–º–Ω–∏–ª–æ—Å—å –≤ –±–æ–ª—å–Ω–∏—Ü–µ? üè•",
        "options": ["–ú–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–í—Ä–∞—á–∏", "–°–∫—É–∫–∞", "–ë–æ–ª—å"],
        "correct": "–ú–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    },
    {
        "insert": {
            "type": "puzzle",
            "question": "ü§ç –ó–∞–≥–∞–¥–∫–∞: –ß—Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å—ë —Ä—É—à–∏—Ç—Å—è? –ß—Ç–æ –º–æ–∂–Ω–æ —É—Å–ª—ã—à–∞—Ç—å –≤ –≥–æ–ª–æ—Å–µ –±–µ–∑ —Å–ª–æ–≤? –ß—Ç–æ –Ω–µ —É—Ö–æ–¥–∏—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –±–æ–ª—å–Ω–æ?",
            "options": ["–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–°–º–µ—Ö", "–ù–∞–¥–µ–∂–¥–∞", "–°–æ–Ω"],
            "correct": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            "after_text": "–ò –¥–∞–∂–µ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –º—ã –±—ã–ª–∏ —á—É—Ç—å –∑–Ω–∞–∫–æ–º—ã, —Ç—ã –º–æ–≥–ª–∞ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –º–µ–Ω—è. –Ø —Ä—è–¥–æ–º. –í—Å–µ–≥–¥–∞.",
            "media": {
                "type": "video",
                "path": "media/hospital_circle.mov"  # –ü—É—Ç—å –∫ –∫—Ä—É–∂–∫—É –∏–∑ –±–æ–ª—å–Ω–∏—Ü—ã
            }
        }
    },
]

current_question = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ü–æ–µ—Ö–∞–ª–∏! üöÄ", callback_data="start_quiz")]]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –ª—é–±–∏–º–∞—è! üíå –ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º?", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "start_quiz":
        current_question[user_id] = 0
        await send_question(update, context, user_id)
    elif query.data.startswith("answer:"):
        _, chosen = query.data.split(":", 1)
        index = current_question.get(user_id, 0)
        q = QUESTIONS[index]

        if "text" in q:  # –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            if chosen == q["correct"]:
                reply = "‚úÖ –í–µ—Ä–Ω–æ!"
            else:
                reply = f"‚ùå –ù–µ —Å–æ–≤—Å–µ–º‚Ä¶ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct']}"
            await query.edit_message_reply_markup(reply_markup=None)
            await query.message.reply_text(reply)
        elif "insert" in q:  # –∑–∞–≥–∞–¥–∫–∞
            correct = q["insert"]["correct"]
            if chosen == correct:
                reply = "üåü –£–≥–∞–¥–∞–ª–∞!"
            else:
                reply = f"üòî –ü–æ—á—Ç–∏‚Ä¶ –≠—Ç–æ –±—ã–ª–∞: {correct}"
            await query.edit_message_reply_markup(reply_markup=None)
            await query.message.reply_text(reply)

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–¥–∏–∞
            if q["insert"].get("after_text"):
                await query.message.reply_text(q["insert"]["after_text"])
            if q["insert"]["media"]["type"] == "photo":
                await query.message.reply_photo(open(q["insert"]["media"]["path"], "rb"))
            elif q["insert"]["media"]["type"] == "video":
                await query.message.reply_video(open(q["insert"]["media"]["path"], "rb"))

        current_question[user_id] += 1
        await send_question(update, context, user_id)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    index = current_question.get(user_id, 0)
    if index >= len(QUESTIONS):
        await context.bot.send_message(chat_id=user_id, text="üéâ –≠—Ç–æ –±—ã–ª –ª–∏—à—å –∫—É—Å–æ—á–µ–∫ –Ω–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å üíï")
        return

    q = QUESTIONS[index]

    if "text" in q:  # –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        keyboard = [[InlineKeyboardButton(opt, callback_data=f"answer:{opt}")] for opt in q["options"]]
        await context.bot.send_message(chat_id=user_id, text=q["text"], reply_markup=InlineKeyboardMarkup(keyboard))
    elif "insert" in q:
        puzzle = q["insert"]
        keyboard = [[InlineKeyboardButton(opt, callback_data=f"answer:{opt}")] for opt in puzzle["options"]]
        await context.bot.send_message(chat_id=user_id, text=f"üß© {puzzle['question']}", reply_markup=InlineKeyboardMarkup(keyboard))

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_query))
    app.run_polling()
